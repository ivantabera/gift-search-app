{"version":3,"sources":["components/AddCategory.js","helpers/GetGif.js","components/GigGriditem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GigGriditem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAExCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGZC,EAHY,iDAGqCC,UAAUH,GAH/C,+DAKCI,MAAOF,GALR,cAKZG,EALY,gBAOGA,EAAKC,OAPR,uBAOXC,EAPW,EAOXA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAEnB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAfvB,kBAmBXM,GAnBW,4CAAH,sDCCNO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,2DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECLwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAfAC,qBAAU,WAENxB,EAAOC,GACFwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAKrB,CAACpB,IAGGqB,EDpB4BK,CAAa1B,GAAlCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,mCAAOpB,EAAP,OAECoB,GAAW,4CAEZ,sBAAKJ,UAAU,YAAf,UAEQH,EAAOJ,KAAK,SAAEC,GACV,OAAO,cAAC,EAAD,eAEUA,GADGA,EAAIC,OAJpC,WEZCgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCdjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df268405.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n//Se destructuran los argumentos del componente \nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //Validacion para evitar que el input tenga menos de 2 letras\n        if ( inputValue.trim().length > 2 ) {\n            // mandamos la referencia con el operador de arrastre a setCategories y el texto en el input con la variable (inputValue) para que haga la insercion\n            setCategories( cate => [ inputValue, ...cate]);\n            // borrar el valor del input para evitar el doble posteo\n            setInputValue('');\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit = {handleSubmit}>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","// haremos una funcion asincrona para recibir los datos de la API\nexport const getGif = async( category ) => {\n\n    // Guardamos nuestra url del api en una constante\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=fb36rhWkdzSVD5NPLfFas2Wryuq82AM2`;\n    // hacemos la peticion con un fetch\n    const resp = await fetch( url );\n    // desestructuramos la data para que solo nos de la data y evitar la demas informacion\n    const {data} = await resp.json();\n\n    // Extraemos la informacion barriendo cada imagen\n    const gifs = data.map( img => {\n        // el return es el que transforma cada elemento del arreglo img\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}\n","import React from 'react'\n\nexport const GigGriditem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn animate__delay-3s\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React/* , { useState, useEffect }  */from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GigGriditem } from './GigGriditem';\n\n\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images, loading } =  useFetchGifs(category);\n\n    return (\n        <>\n            <h3> { category } </h3>\n\n            {loading && <p>Cargando...</p>}\n            \n            <div className=\"card-grid\">\n                {\n                    images.map( ( img ) => {\n                        return <GigGriditem \n                                    key = { img.id }\n                                    { ...img }\n                                />\n                    })\n                };\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect} from \"react\"\nimport { getGif } from \"../helpers/GetGif\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n\n    \n    // Declaramos la funcion getGif dentro del useEffect() con [] para que solo se ejecute 1 ves cuando cargue la pagina\n    // El Hook de efecto te permite llevar a cabo efectos secundarios en componentes funcionales:\n    useEffect(() => {\n        \n        getGif(category)\n            .then( imgs => {\n                \n                setState({\n                    data:imgs,\n                    loading:false\n                });\n                \n            })\n\n    }, [category])\n\n\n    return state; // {data:[], loading:true}\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon ball'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n\n            <hr/>\n\n            <ol>\n                {\n                    categories.map( (category) =>( \n                        <GifGrid \n                            key={category}\n                            category={category} />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// GifExpertApp\n"],"sourceRoot":""}